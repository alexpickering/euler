from functools import reduce, cache

LONG_NUM = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450


@cache
def seq_val(seq):
    if len(seq) == 1:
        return int(seq)
    else:
        return reduce(lambda x, y: int(x) * int(y), seq)


def highest_adj_digits(n_adj):
    num_str = str(LONG_NUM)
    largest_seq = '0'
    for idx, _ in enumerate(num_str):
        seq = num_str[idx:idx + n_adj]
        if seq_val(seq) > seq_val(largest_seq):
            largest_seq = seq

    return largest_seq


def test_seq_val():
    assert seq_val('3') == 3
    assert seq_val('23') == 6
    assert seq_val('517') == 35
    assert seq_val('9989') == 5832


def test_highest_adj_digits():
    assert highest_adj_digits(n_adj=1) == '9'
    assert highest_adj_digits(n_adj=2) == '99'
    assert highest_adj_digits(n_adj=3) == '989'
    assert highest_adj_digits(n_adj=4) == '9989'



def main():
    adj_digits = highest_adj_digits(n_adj=13)
    product = seq_val(adj_digits)
    print(f'adjacent digits: {adj_digits}')
    print(f'product: {product}')
    pass


if __name__ == '__main__':
    main()
